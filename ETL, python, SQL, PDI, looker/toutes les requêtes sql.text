#script valeur max user et review

USE yelp;

(SELECT 
    'Top Review' AS critere,
    user_id, 
    name, 
    review_count, 
    fans
 FROM user_CA
 ORDER BY review_count DESC
 LIMIT 1)
UNION ALL
(SELECT 
    'Top Fans' AS critere,
    user_id, 
    name, 
    review_count, 
    fans
 FROM user_CA
 ORDER BY fans DESC
 LIMIT 1);

#script sql roll up année et nombre de fans par catégorie

SELECT 
  YEAR(u.yelping_since) AS annee,
  m.categorie_fans,
  COUNT(u.user_id) AS nb_users,
  SUM(m.fans) AS total_fans
FROM MAPPING_FANS_CATEGORIE AS m
JOIN user_CA AS u 
  ON m.user_id = u.user_id
GROUP BY 
  YEAR(u.yelping_since),
  m.categorie_fans
ORDER BY 
  annee,
  m.categorie_fans;


#script requêtes moyenne mobile
USE yelp;

WITH yearly_reviews AS (
  -- Agréger les avis par business et par année
  SELECT
    business_id,
    YEAR(`date`) AS review_year,
    AVG(stars) AS avg_stars
  FROM review_CA
  GROUP BY business_id, YEAR(`date`)
),
cumulative_avg AS (
  -- Calculer la moyenne cumulative (moving average) de toutes les années précédentes jusqu'à l'année courante
  SELECT
    business_id,
    review_year,
    avg_stars,
    AVG(avg_stars) OVER (
      PARTITION BY business_id
      ORDER BY review_year
      ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
    ) AS moving_avg_all_years
  FROM yearly_reviews
)
SELECT
  c.business_id,
  b.name AS business_name,
  c.review_year,
  c.avg_stars,
  c.moving_avg_all_years AS moving_avg
FROM cumulative_avg c
JOIN business_CA b ON c.business_id = b.business_id
WHERE c.review_year BETWEEN 2016 AND 2020
ORDER BY c.business_id, c.review_year;

#script business avec plus de review et toutes étoiles données
#un
USE yelp;
SELECT business_id, name, review_count, city, state
FROM business_CA
ORDER BY review_count DESC
LIMIT 10;

#deux
# Los Agaves, yPSejq3_erxo9zdVYTBnZA, 
WITH daily_rating AS (
  SELECT 
    DATE(date) AS review_date,
    AVG(stars) AS avg_stars
  FROM review_CA
  WHERE business_id = 'yPSejq3_erxo9zdVYTBnZA'
  GROUP BY DATE(date)
),
volatility AS (
  SELECT 
    STDDEV_POP((avg_stars - prev_avg) / prev_avg) AS daily_volatility
  FROM (
    SELECT 
      review_date,
      avg_stars,
      LAG(avg_stars) OVER (ORDER BY review_date) AS prev_avg
    FROM daily_rating
  ) t
  WHERE prev_avg IS NOT NULL
)
SELECT 
  b.name,
  b.stars AS business_stars,
  v.daily_volatility
FROM business_CA b
CROSS JOIN volatility v
WHERE b.business_id = 'yPSejq3_erxo9zdVYTBnZA';

#la star et la volatité des notes données 

#trois,  toutes les notes obtenues 
SELECT 
  r.review_id,
  DATE(r.date) AS review_date,
  r.stars AS review_stars,
  b.stars AS business_stars
FROM review_CA r
JOIN business_CA b ON r.business_id = b.business_id
WHERE r.business_id = 'yPSejq3_erxo9zdVYTBnZA'
ORDER BY r.date;

#script  top 5 des business pus popu parmis les 10 catego plus popu 
USE yelp;

-- 1. Générer une séquence pour découper le champ 'categories'
WITH RECURSIVE numbers AS (
  SELECT 1 AS n
  UNION ALL
  SELECT n + 1 FROM numbers WHERE n < 10
),

-- 2. Séparer les catégories pour chaque business
split_categories AS (
  SELECT 
    business_id,
    TRIM(SUBSTRING_INDEX(SUBSTRING_INDEX(categories, ',', numbers.n), ',', -1)) AS category
  FROM business_CA
  JOIN numbers 
    ON CHAR_LENGTH(categories) - CHAR_LENGTH(REPLACE(categories, ',', '')) >= numbers.n - 1
),

-- 3. Sélectionner les 10 catégories les plus populaires (en nombre de business distincts)
top_categories AS (
  SELECT 
    category,
    COUNT(DISTINCT business_id) AS nb_business
  FROM split_categories
  GROUP BY category
  ORDER BY nb_business DESC
  LIMIT 10
),

-- 4. Regrouper les avis par business et par année (entre 2016 et 2020)
reviews_year AS (
  SELECT 
    business_id,
    YEAR(`date`) AS review_year,
    COUNT(*) AS nb_reviews,
    AVG(stars) AS avg_stars
  FROM review_CA
  WHERE YEAR(`date`) BETWEEN 2016 AND 2020
  GROUP BY business_id, YEAR(`date`)
),

-- 5. Joindre les informations de business et de reviews pour n'inclure que les business avec une note de 5 
--    et appartenant aux top catégories, en conservant l'année du review
business_in_top_categories AS (
  SELECT
    b.business_id,
    b.name,
    b.city,
    b.stars,
    b.review_count,
    r.review_year,
    sc.category
  FROM business_CA b
  JOIN split_categories sc ON b.business_id = sc.business_id
  JOIN top_categories tc ON sc.category = tc.category
  JOIN reviews_year r ON b.business_id = r.business_id
  WHERE b.stars = 5
),

-- 6. Pour chaque catégorie et chaque année, classer les business par review_count décroissant
ranked_businesses AS (
  SELECT 
    business_id,
    name,
    city,
    stars,
    review_count,
    review_year,
    category,
    ROW_NUMBER() OVER (PARTITION BY category, review_year ORDER BY review_count DESC) AS rn
  FROM business_in_top_categories
)

-- 7. Sélectionner le top 5 par catégorie pour chaque année (entre 2016 et 2020)
SELECT 
  business_id,
  name,
  city,
  stars,
  review_count,
  review_year,
  category
FROM ranked_businesses
WHERE rn <= 5
ORDER BY category, review_year, rn;

#script  1er etdernier review des business

WITH ranked_reviews AS (
  SELECT
    business_id,
    stars,
    date,
    ROW_NUMBER() OVER (PARTITION BY business_id ORDER BY date ASC) AS rn_first,
    ROW_NUMBER() OVER (PARTITION BY business_id ORDER BY date DESC) AS rn_last
  FROM review_CA
)
SELECT 
  b.business_id,
  b.name,
  r_first.stars AS first_review_stars,
  r_first.date AS first_review_date,
  r_last.stars AS last_review_stars,
  r_last.date AS last_review_date
FROM business_CA b
LEFT JOIN ranked_reviews r_first 
  ON b.business_id = r_first.business_id AND r_first.rn_first = 1
LEFT JOIN ranked_reviews r_last 
  ON b.business_id = r_last.business_id AND r_last.rn_last = 1;
